loadrt hostmot2 debug_idrom=1 debug_module_descriptors=1 debug_pin_descriptors=1 debug_modules=1
#loadrt hostmot2

#Mesa Firmware 30Aug
loadrt hm2_pci config="firmware=hm2/5i20/7i65x2.bit num_encoders=0 num_pwmgens=0 num_stepgens=0 num_bspis=1"

#loadrt mesa_7i65 "bspi_chans=hm2_5i20.0.bspi.0, hm2_5i20.0.bspi.1"
loadrt mesa_7i65 bspi_chans=hm2_5i20.0.bspi.0

# kinematics
loadrt trivkins

# motion controller, get name and thread periods from ini file
loadrt motmod servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES

# standard components
loadrt pid num_chan=3 

#thread loaded by motmod
#loadrt threads name1=test period1=1000000

# addf hm2_5i20.0.read          test
# addf hm2_5i20.0.write         test
# addf hm2_5i20.0.pet_watchdog  test

addf hm2_[HOSTMOT2](BOARD).0.read          servo-thread

addf motion-command-handler                servo-thread
addf motion-controller                     servo-thread

addf pid.0.do-pid-calcs                    servo-thread
addf pid.1.do-pid-calcs                    servo-thread
addf pid.2.do-pid-calcs                    servo-thread

addf hm2_[HOSTMOT2](BOARD).0.write         servo-thread
addf hm2_[HOSTMOT2](BOARD).0.pet_watchdog  servo-thread


# these pins are the additional signals for the 7i65
setp hm2_5i20.0.gpio.021.is_output 1 # /ldac
setp hm2_5i20.0.gpio.022.is_output 1 # /enable
setp hm2_5i20.0.gpio.023.is_output 1 # reset




loadrt scale count=3

addf scale.0 servo-thread
addf scale.1 servo-thread

#spindle speed scale
addf scale.2 servo-thread

loadrt offset count=2

addf offset.0.update-output servo-thread
addf offset.1.update-output servo-thread


# ################
# X [0] Axis
# ################

# load absolute module to convert position inverter signal to 0..10V
loadrt abs
addf abs.0 			servo-thread

# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE
net emcmot.00.enable => pid.0.enable
#net emcmot.00.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.00.enable
net emcmot.00.enable <= axis.0.amp-enable-out 
net emcmot.00.enable => mesa-7i65.0.enable.2.out


# position 
#emcmot.00.pos-cmd
#net motor.00.unscaled-position-input scale.0.in mesa-7i65.0.analogue.0.in
net motor.00.raw-position-input scale.0.in 	mesa-7i65.0.analogue.0.in
net motor.00.scaled-position scale.0.out 	offset.0.in
net motor.00.pos-fb offset.0.out 			pid.0.feedback

setp scale.0.gain 		[AXIS_0]INPUT_SCALE
setp offset.0.offset 	[AXIS_0]INPUT_OFFSET

#net motor.00.unscaled-position-input scale.0.in mesa-7i65.0.analogue.0.in

# ??push copy back to Axis GUI??
net motor.00.pos-fb => axis.0.motor-pos-fb 

# set PID loop gains from inifile
setp pid.0.Pgain [AXIS_0]P
setp pid.0.Igain [AXIS_0]I
setp pid.0.Dgain [AXIS_0]D
setp pid.0.bias [AXIS_0]BIAS
setp pid.0.FF0 [AXIS_0]FF0
setp pid.0.FF1 [AXIS_0]FF1
setp pid.0.FF2 [AXIS_0]FF2
setp pid.0.deadband [AXIS_0]DEADBAND
setp pid.0.maxoutput [AXIS_0]MAX_OUTPUT

# position command signals
net emcmot.00.pos-cmd axis.0.motor-pos-cmd => pid.0.command
# pass command to abs to allow for/rev of inverter to be set
net motor.00.command  pid.0.output  =>  abs.0.in

# reverse signal
net motor.00.reverse-signal abs.0.is-positive mesa-7i65.0.enable.3.out
# position signal
net motor.00.absolute-command abs.0.out mesa-7i65.0.analogue.2.out


# ################
# Y [1] Axis
# ################

# proprotional valve. 1 amplifier per solenoid
# converts -1.0 .. +1.0 to separate proportional valve amp caps
loadrt dual_valve
addf dual-valve.0 servo-thread

# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE
net emcmot.01.enable => pid.1.enable
#net emcmot.01.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.01.enable
net emcmot.01.enable <= axis.1.amp-enable-out 
# TODO connect enable

#setp  hm2_[HOSTMOT2](BOARD).0.encoder.01.scale  [AXIS_1]INPUT_SCALE
#net motor.01.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.01.position => pid.1.feedback
#net motor.01.pos-fb => axis.1.motor-pos-fb #push copy back to Axis GUI

# position feedback
net motor.01.raw-position-input scale.1.in 	mesa-7i65.0.analogue.1.in
net motor.01.scaled-position scale.1.out 	offset.1.in
net motor.01.pos-fb offset.1.out 			pid.1.feedback

setp scale.1.gain 		[AXIS_1]INPUT_SCALE
setp offset.1.offset 	[AXIS_1]INPUT_OFFSET

#net motor.01.unscaled-position-input scale.1.in mesa-7i65.0.analogue.1.in
# this will be 0..10V over 75mm then the angle of the mechanics
#setp scale.1.gain [AXIS_1]INPUT_SCALE

#net motor.01.pos-fb scale.1.out pid.1.feedback
# ??push copy back to Axis GUI??
net motor.01.pos-fb => axis.1.motor-pos-fb 

# set PID loop gains from inifile
setp pid.1.Pgain [AXIS_1]P
setp pid.1.Igain [AXIS_1]I
setp pid.1.Dgain [AXIS_1]D
setp pid.1.bias [AXIS_1]BIAS
setp pid.1.FF0 [AXIS_1]FF0
setp pid.1.FF1 [AXIS_1]FF1
setp pid.1.FF2 [AXIS_1]FF2
setp pid.1.deadband [AXIS_1]DEADBAND
setp pid.1.maxoutput [AXIS_1]MAX_OUTPUT

# position command signals
#setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.output-type 1 #pwm on pin1, dir on pin2
#setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.scale [AXIS_1]OUTPUT_SCALE
	
net emcmot.01.pos-cmd axis.1.motor-pos-cmd => pid.1.command
#net motor.01.command  pid.1.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.01.value

# pass command to valve selector
net motor.01.command  pid.1.output  =>  dual-valve.0.command

# set connections to analog outs
net dual-valve.0.forward-signal dual-valve.0.command-forward mesa-7i65.0.analogue.6.out
net dual-valve.0.reverse-signal dual-valve.0.command-reverse mesa-7i65.0.analogue.7.out

# ##################################################
# Spindle control
# ##################################################

# net spindle			mesa-7i65.0.enable.1.out 	machine.spindle
# net spindleSpeed	mesa-7i65.0.analogue.1.out	machine.spindleSpeed
net spindle			mesa-7i65.0.enable.1.out 	
net spindleSpeed	mesa-7i65.0.analogue.1.out	

net spindle 		motion.spindle-on
#net spindleSpeed	motion.spindle-speed-out

# assume 200-1 for now
setp scale.2.gain 	0.005
net spindleSpeedRPM	scale.2.in 					motion.spindle-speed-out
net spindleSpeed 	scale.2.out

# ##################################################
# Standard I/O Block - EStop, Etc WR: Copied from hm2-servo.hal
# ##################################################

# create a signal for the estop loopback
#net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in
setp iocontrol.0.emc-enable-in 	1
setp motion.enable 				1

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

# start the state machine for machine control
loadrt machine
addf machine servo-thread

# edge detector for start signal (to avoid duplicates)
loadrt edge
addf edge.0 				servo-thread

# pulse width == servo thread period
setp edge.0.out-width-ns 	1000000
#rising edge
setp edge.0.in-edge 		0


#setp hm2_5i20.0.gpio.038.is_output 1
#setp hm2_5i20.0.gpio.037.is_output 1
setp hm2_5i20.0.gpio.036.is_output 1
setp hm2_5i20.0.gpio.035.is_output 1
setp hm2_5i20.0.gpio.034.is_output 1
setp hm2_5i20.0.gpio.033.is_output 1
setp hm2_5i20.0.gpio.032.is_output 1

#setp hm2_5i20.0.gpio.038.invert_output 1
#setp hm2_5i20.0.gpio.037.invert_output 1
setp hm2_5i20.0.gpio.036.invert_output 1
setp hm2_5i20.0.gpio.035.invert_output 1
setp hm2_5i20.0.gpio.034.invert_output 1
setp hm2_5i20.0.gpio.033.invert_output 1
setp hm2_5i20.0.gpio.032.invert_output 1


#0,1,2,3,5,6,7
net mcb1 					hm2_5i20.0.gpio.047.in_not
net mcb2 					hm2_5i20.0.gpio.046.in_not
net mcb3 					hm2_5i20.0.gpio.045.in_not
net stopButton 				hm2_5i20.0.gpio.044.in_not		machine.stopButton
net startButton 			hm2_5i20.0.gpio.043.in_not		machine.startButton

net viceRelay 				hm2_5i20.0.gpio.042.in_not     	machine.viceSafetyRelay
net eStopRelay 				hm2_5i20.0.gpio.041.in_not
net twoHandRelay			hm2_5i20.0.gpio.040.in_not
net twoHandStart			hm2_5i20.0.gpio.040.in

# footpedal means the signal to operate.. this may be a 2hand control
net twoHandStart			machine.footPedal
#net footPedal		hm2_5i20.0.gpio.039.in_not 	machine.footPedal

net twoHandStart			edge.0.in
net startEdge				edge.0.out 					machine.startEdge

net viceSwitchDiagnostic	hm2_5i20.0.gpio.038.in_not
net guardSwitchDiagnostic 	hm2_5i20.0.gpio.037.in_not

#net output3 				hm2_5i20.0.gpio.036.out
net hydraulic 				hm2_5i20.0.gpio.036.out 	machine.hydraulicMotor
#net hydraulic 				hm2_5i20.0.gpio.035.out     machine.hydraulicMotor
net dump 					hm2_5i20.0.gpio.034.out     machine.dumpValve
net viceOpen 				hm2_5i20.0.gpio.033.out     machine.viceOpenValve
net viceClose 				hm2_5i20.0.gpio.032.out     machine.viceCloseValve

# connect halui
net machineOff				machine.machineOff			halui.machine.off
net machineOn				machine.machineOn			halui.machine.on
net isMachineOn				machine.isMachineOn			halui.machine.is-on

net runProgram				machine.runProgram			halui.program.run
net isRunProgram			machine.isRunProgram		halui.program.is-running

net isModeAuto				machine.isModeAuto			halui.mode.is-auto
net isModeManual			machine.isModeManual		halui.mode.is-manual
net modeAuto				machine.modeAuto			halui.mode.auto
net modeManual				machine.modeManual			halui.mode.manual

# motion handler connections from machine module
#loadusr -W /home/user/linuxcnc/configs/test_area/motionHandler.py

# load the hmi
#loadusr /home/user/linuxcnc/configs/test_area/gui1.py
loadusr /home/user/installation/gui1.py
# commands in hmi.hal will be called after setup of module

# do this last to avoid watchdog
net mesa-7i65.ldac    hm2_5i20.0.gpio.021.out
net mesa-7i65.enable  hm2_5i20.0.gpio.022.out
net mesa-7i65.reset   hm2_5i20.0.gpio.023.out
