loadrt hostmot2 debug_idrom=1 debug_module_descriptors=1 debug_pin_descriptors=1 debug_modules=1
#loadrt hostmot2

#Mesa Firmware 30Aug
loadrt hm2_pci config="firmware=hm2/5i20/7i65x2.bit num_encoders=0 num_pwmgens=0 num_stepgens=0 num_bspis=1"

#loadrt mesa_7i65 "bspi_chans=hm2_5i20.0.bspi.0, hm2_5i20.0.bspi.1"
loadrt mesa_7i65 bspi_chans=hm2_5i20.0.bspi.0

loadrt threads name1=test period1=1000000

addf hm2_5i20.0.read          test
addf hm2_5i20.0.write         test
addf hm2_5i20.0.pet_watchdog  test

# these pins are the additional signals for the 7i65
setp hm2_5i20.0.gpio.021.is_output 1 # /ldac
setp hm2_5i20.0.gpio.022.is_output 1 # /enable
setp hm2_5i20.0.gpio.023.is_output 1 # reset

net mesa-7i65.ldac    hm2_5i20.0.gpio.021.out
net mesa-7i65.enable  hm2_5i20.0.gpio.022.out
net mesa-7i65.reset   hm2_5i20.0.gpio.023.out




# # ################
# # X [0] Axis
# # ################

# # axis enable chain
# newsig emcmot.00.enable bit
# sets emcmot.00.enable FALSE
# net emcmot.00.enable => pid.0.enable
# #net emcmot.00.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.00.enable
# net emcmot.00.enable <= axis.0.amp-enable-out 

# # encoder feedback
# setp hm2_[HOSTMOT2](BOARD).0.encoder.00.counter-mode 0
# setp hm2_[HOSTMOT2](BOARD).0.encoder.00.filter 1
# setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-invert 0
# setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-mask 0
# setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-mask-invert 0

# setp  hm2_[HOSTMOT2](BOARD).0.encoder.00.scale  [AXIS_0]INPUT_SCALE
# net motor.00.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.00.position => pid.0.feedback
# net motor.00.pos-fb => axis.0.motor-pos-fb #push copy back to Axis GUI

# # set PID loop gains from inifile
# setp pid.0.Pgain [AXIS_0]P
# setp pid.0.Igain [AXIS_0]I
# setp pid.0.Dgain [AXIS_0]D
# setp pid.0.bias [AXIS_0]BIAS
# setp pid.0.FF0 [AXIS_0]FF0
# setp pid.0.FF1 [AXIS_0]FF1
# setp pid.0.FF2 [AXIS_0]FF2
# setp pid.0.deadband [AXIS_0]DEADBAND
# setp pid.0.maxoutput [AXIS_0]MAX_OUTPUT

# # position command signals
# setp hm2_[HOSTMOT2](BOARD).0.pwmgen.00.output-type 1 #pwm on pin1, dir on pin2
# setp hm2_[HOSTMOT2](BOARD).0.pwmgen.00.scale  [AXIS_0]OUTPUT_SCALE

# # load absolute module to convert position inverter signal to 0..10V
# loadrt abs
# addf abs.0 test

# net emcmot.00.pos-cmd axis.0.motor-pos-cmd => pid.0.command
# #net motor.00.command  pid.0.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.00.value
# net motor.00.command  pid.0.output  =>  abs.0.in

# net abs.0.is-negative mesa-7i65.0.enable.3.out
# net abs.0.out mesa-7i65.0.analogue.2.out


# # ################
# # Y [1] Axis
# # ################

# # axis enable chain
# newsig emcmot.01.enable bit
# sets emcmot.01.enable FALSE
# net emcmot.01.enable => pid.1.enable
# net emcmot.01.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.01.enable
# net emcmot.01.enable <= axis.1.amp-enable-out 

# # encoder feedback
# setp hm2_[HOSTMOT2](BOARD).0.encoder.01.counter-mode 0
# setp hm2_[HOSTMOT2](BOARD).0.encoder.01.filter 1
# setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-invert 0
# setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-mask 0
# setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-mask-invert 0

# setp  hm2_[HOSTMOT2](BOARD).0.encoder.01.scale  [AXIS_1]INPUT_SCALE
# net motor.01.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.01.position => pid.1.feedback
# net motor.01.pos-fb => axis.1.motor-pos-fb #push copy back to Axis GUI

# # set PID loop gains from inifile
# setp pid.1.Pgain [AXIS_1]P
# setp pid.1.Igain [AXIS_1]I
# setp pid.1.Dgain [AXIS_1]D
# setp pid.1.bias [AXIS_1]BIAS
# setp pid.1.FF0 [AXIS_1]FF0
# setp pid.1.FF1 [AXIS_1]FF1
# setp pid.1.FF2 [AXIS_1]FF2
# setp pid.1.deadband [AXIS_1]DEADBAND
# setp pid.1.maxoutput [AXIS_1]MAX_OUTPUT

# # position command signals
# setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.output-type 1 #pwm on pin1, dir on pin2
# setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.scale [AXIS_1]OUTPUT_SCALE

# net emcmot.01.pos-cmd axis.1.motor-pos-cmd => pid.1.command
# net motor.01.command  pid.1.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.01.value

# # proprotional valve. 1 amplifier per solenoid
# # converts -1.0 .. +1.0 to separate proportional valve amp caps
# loadrt dual_valve
# addf dual-valve.0 test

# # set connections to analog outs
# net dual-valve.0.command-forward mesa-7i65.0.analogue.6.out
# net dual-valve.0.command-reverse mesa-7i65.0.analogue.7.out



start

setp hm2_5i20.0.gpio.047.is_output 1
setp hm2_5i20.0.gpio.046.is_output 1
setp hm2_5i20.0.gpio.045.is_output 1
setp hm2_5i20.0.gpio.044.is_output 1

setp hm2_5i20.0.gpio.047.out 0
setp hm2_5i20.0.gpio.046.out 0
setp hm2_5i20.0.gpio.045.out 0
setp hm2_5i20.0.gpio.044.out 0

# setp mesa-7i65.0.analogue.0.out 0.8
# setp mesa-7i65.0.analogue.1.out 0.8
# setp mesa-7i65.0.analogue.2.out 0.8
# setp mesa-7i65.0.analogue.3.out 0.8
# setp mesa-7i65.0.analogue.4.out 0.8
# setp mesa-7i65.0.analogue.5.out 0.8
# setp mesa-7i65.0.analogue.6.out 0.8
# setp mesa-7i65.0.analogue.7.out 0.8

